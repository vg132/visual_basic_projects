VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "oReg"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'***********
'Here are all functions for the registry
'every thing here works.
'***********

Option Explicit

Enum SELECT_HKEY
    HKEY_CLASSES_ROOT = &H80000000
    HKEY_CURRENT_USER = &H80000001
    HKEY_LOCAL_MACHINE = &H80000002
    HKEY_USERS = &H80000003
    HKEY_PERFORMANCE_DATA = &H80000004
    HKEY_CURRENT_CONFIG = &H80000005
    HKEY_DYN_DATA = &H80000006
End Enum

Enum REG_DATA
    REG_SZ = 1
    REG_BINARY = 3
    REG_DWORD = 4
End Enum

Private Type FILETIME
    dwLowDateTime As Long
    dwHighDateTime As Long
End Type

Const ERROR_SUCCESS = 0&
Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_ENUMERATE_SUB_KEYS = &H8

Private Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String) As Long

Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long
Private Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long) As Long
Private Declare Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpName As String, lpcbName As Long, lpReserved As Long, ByVal lpClass As String, lpcbClass As Long, lpftLastWriteTime As FILETIME) As Long

Private Declare Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpValueName As String, lpcbValueName As Long, ByVal lpReserved As Long, lpType As Long, lpData As Byte, lpcbData As Long) As Long

Public Sub DeleteValue(ByVal hKey As SELECT_HKEY, ByVal strPath As String, ByVal strValue As String)
Dim hCurKey As Long
Dim lRegResult As Long
    lRegResult = RegOpenKey(hKey, strPath, hCurKey)
    lRegResult = RegDeleteValue(hCurKey, strValue)
    lRegResult = RegCloseKey(hCurKey)
End Sub

Public Sub DeleteKey(ByVal hKey As SELECT_HKEY, ByVal strPath As String)
Dim lRegResult As Long
    lRegResult = RegDeleteKey(hKey, strPath)
End Sub

Public Sub CreateKey(ByVal hKey As SELECT_HKEY, strPath As String)
Dim hCurKey As Long
Dim lRegResult As Long
    lRegResult = RegCreateKey(hKey, strPath, hCurKey)
    lRegResult = RegCloseKey(hCurKey)
End Sub

Public Function SaveValue(hKey As SELECT_HKEY, lType As REG_DATA, strPath As String, strValue As String, Optional strData As String, Optional lData As Long)
Dim hCurKey As Long
Dim lRegResult As Long
    lRegResult = RegCreateKey(hKey, strPath, hCurKey)
    Select Case lType
        Case REG_SZ
            lRegResult = RegSetValueEx(hCurKey, strValue, 0, lType, ByVal strData, Len(strData))
        Case REG_DWORD
            lRegResult = RegSetValueEx(hCurKey, strValue, 0&, lType, lData, 4)
    End Select
    lRegResult = RegCloseKey(hCurKey)
End Function

Public Function GetValue(hKey As SELECT_HKEY, strPath As String, strValue As String) As Variant
Dim hCurKey As Long
Dim lValueType As Long
Dim strBuffer As String
Dim lDataBufferSize As Long
Dim intZeroPos As Integer
Dim lRegResult As Long
Dim lBuffer As Long
Dim byBuffer() As Byte

    lRegResult = RegOpenKey(hKey, strPath, hCurKey)
    lRegResult = RegQueryValueEx(hCurKey, strValue, 0&, lValueType, ByVal 0&, lDataBufferSize)

    If lValueType = REG_DWORD Then
        lDataBufferSize = 4
        lRegResult = RegQueryValueEx(hCurKey, strValue, 0&, lValueType, lBuffer, lDataBufferSize)
        GetValue = lBuffer
    ElseIf lValueType = REG_SZ Then
        strBuffer = String(lDataBufferSize, " ")
        lRegResult = RegQueryValueEx(hCurKey, strValue, 0&, 0&, ByVal strBuffer, lDataBufferSize)
        intZeroPos = InStr(strBuffer, Chr$(0))
        If intZeroPos > 0 Then
            GetValue = Left$(strBuffer, intZeroPos - 1)
        Else
            GetValue = strBuffer
        End If
    ElseIf lValueType = REG_BINARY Then
        ReDim byBuffer(lDataBufferSize - 1) As Byte
        lRegResult = RegQueryValueEx(hCurKey, strValue, 0&, lValueType, byBuffer(0), lDataBufferSize)
        GetValue = byBuffer
    End If
    lRegResult = RegCloseKey(hCurKey)
End Function

Public Function EnumValue(hKey2 As SELECT_HKEY, sPath As String) As String
Dim ValueName As String
Dim ValueLen As Long
Dim DataType As Long
Dim Data(0 To 499) As Byte
Dim DataLen As Long
Dim DataString As String
Dim hKey As Long
Dim lIndex As Long
Dim RetVal As Long
Dim sRead As String
    
    RetVal = RegOpenKeyEx(hKey2, sPath, 0, KEY_QUERY_VALUE, hKey)
    If RetVal <> 0 Then
      MsgBox "Registry key could not be opened -- aborting."
      End
    End If
    lIndex = 0
    While RetVal = 0
        ValueName = Space(255)
        ValueLen = 255
        DataLen = 500
        RetVal = RegEnumValue(hKey, lIndex, ValueName, ValueLen, ByVal 0, DataType, Data(0), DataLen)
        If RetVal = 0 Then
            ValueName = Left(ValueName, ValueLen)
            sRead = sRead & ValueName & Chr(0)
        End If
        lIndex = lIndex + 1
    Wend
    RetVal = RegCloseKey(hKey)
    EnumValue = sRead
End Function
